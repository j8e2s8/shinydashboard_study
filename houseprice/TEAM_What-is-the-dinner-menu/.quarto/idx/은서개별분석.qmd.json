{"title":"project1","markdown":{"yaml":{"title":"project1","author":"장일준, 이태현, 정은서, 정아영","editor":"visual","jupyter":"python3"},"headingText":"소상공인시장진흥공단_전국 전통시장 현황_2015","containsRefs":false,"markdown":"\n\n\n\n\n예전에는 전통시장을 가면 편의시설이 부족해서 접근성이 떨어졌는데, 요즘에는 편의시설을 개선하려는 노력을 기울이고 있다. 1. 와이파이 설치 2. 건강한 식재료 (백년초 국수 등 + 지역 특색) 3. 공산품이 아니라 정성이 들어간 음식들 4. 저렴한 가격 + 온누리 상품권 사용가능 5. 쇼핑 후 차 한 잔의 여유를 위한 여가 공간 구비 (카페 등) 6. 1인 가구를 위한 음식\n\n상품권 가맹점포 정보 https://www.sbiz.or.kr/sijangtong/nation/onnuri/onnuriMktList.do?menu_type_a=A&menu_cms=&menu_id=070400#shopPopBtn\n\n```{python}\nimport pandas as pd\nimport numpy as np\n\nmarket = pd.read_excel(\"traditionalmarket.xlsx\")\nmarket2 = market.copy()\nmarket2.head()\n```\n\n현행 시장법상 시장은 상설시장과 정기시장으로 구분된다.\n\n![상설 시장](상설시장%20이미지.jpg) 상설 시장 : 시장 개설 요건을 갖추고, 일정한 구역내에서 상시로 거래하는 영업장. ![정기 시장](정기시장%20이미지.jpg)\n\n정기 시장 : 일정한 지역안에서 정기 또는 계절적으로 개설되는 시장. ![상설 시장과 5일장이 공존하는 시장](상설%20시장%20+%205일장%20이미지.jpg) 상설 시장과 5일장이 공존하는 시장 : 관광형 시장으로 탈바꿈한 시장. 5일 장날이 되면 주민, 관광객 등으로 인상한해를 이룬다.\n\n데이터상 '시장유형'에 정기시장이 존재하면 '시장개설주기'가 5일장이라고 하는지 알아보고자 함.\n\nhttps://wowmap.kr/market5 : 5일장 지도 (위치)\n\n## 변수명 바꾸기\n\n```{python}\nmarket2 = market2.rename(columns={'시장명' : 'market_name',\n                              '시장유형' : 'type',\n                              '소재지도로명주소' : 'address_new',\n                              '시장개설주기' : 'open_period',\n                              '소재지지번주소' : 'address_old',\n                              '점포수' : 'market_count',\n                              '사용가능상품권' : 'certificate',\n                              '공중화장실 보유여부' : 'public_toilet',\n                              '주차장 보유여부' : 'parking_lot',\n                              '개설년도' : 'year' ,\n                              '데이터기준일자' : 'data_date'})\nmarket2.head()\n```\n\n잘 바뀐 것을 알 수 있다.\n\n## 데이터 정보 알아보기\n\n```{python}\nmarket2.info()\n```\n\n8개가 범주컬럼이고, 2개가 수치 컬럼, 1개가 날짜컬럼임을 알 수 있다. (수치컬럼중 1개는 연도컬럼이라서, 우리가 분석해 볼 수 있는 수치 컬럼은 1개뿐이다.) 그리고 사용가능상품권(certificate)와 개설연도(year)에만 null값이 있다는 것을 알 수 있다.\n\n각 컬럼의 범주 알아보기\n\n```{python}\nmarket2['market_name'].value_counts()\n```\n\n이름이 동일한 서로 다른 시장이 존재함.\n\n```{python}\nmarket2['type'].value_counts()\n```\n\n시장 유형은 3가지임.\n\n```{python}\nmarket2['address_new'].value_counts()\n```\n\n```{python}\nmarket2['address_old'].value_counts()\n```\n\n주소가 동일한 시장이 있음\n\n```{python}\nmarket2['open_period'].value_counts()\n```\n\n정기 시장에 5일, 2일, 6일 있음.\n\n```{python}\nmarket2['certificate'].value_counts()\n```\n\n```{python}\nmarket2['public_toilet'].value_counts()\n```\n\n```{python}\nmarket2['parking_lot'].value_counts()\n```\n\n```{python}\nmarket2['year'].value_counts()\n```\n\n```{python}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nyear_group_count = market2.groupby('year').agg(year_count= ('year', 'count'))\n\nplt.clf()\nsns.lineplot(data=year_group_count, x='year', y='year_count')\nplt.show()\n```\n\n```{python}\nmarket2['data_date'].value_counts()\n```\n\n## 점포수 요약 정보 알아보기\n\n```{python}\nmarket2[['market_count']].describe()\n```\n\n점포수 위주로 봤을 때, 25%, 75% 기준으로 점포 사이즈를 나누는 것이 합리적으로 보인다. samll : 50개 미만 medium : 50개 이상 134개 미만 large : 134개 이상 3가지의 범주로 나누고자 한다.\n\n## 점포수로 범주화하기\n\n```{python}\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] >= 134, \"large\", \n                                        np.where(market2[\"market_count\"] >= 50, \"medium\", \"small\")))\nmarket2.head()\n```\n\n점포수대로 범주화가 잘 되어진 것으로 보인다.\n\n```{python}\nimport matplotlib.pyplot as plt\nplt.clf()\nmarket2['market_scale'].value_counts().plot.bar(rot=0)\nplt.show()\n```\n\n## 편의시절(공중화장실, 주차장) 보유 여부에 따라 시장을 범주화하기.\n\n```{python}\nmarket2['level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nmarket2.head()\n```\n\n편의시절(공중화장실, 주차장) 보유 여부에 따라 시장의 편의성이 얼마나 좋은지 범주화 해보고자 한다.\n\n(공중화장실 Y, 주차장 Y) -\\> high (공중화장실 Y, 주차장 N) -\\> intermediate (공중화장실 N, 주차장 Y) -\\> intermediate (공중화장실 N, 주차장 N) -\\> low\n\n```{python}\nimport matplotlib.pyplot as plt\nplt.clf()\nmarket2['level'].value_counts().plot.bar(rot=0)\nplt.show()\n```\n\n대다수의 시장이 편의시설이 잘 구비되어 있음을 알 수 있다.\n\nY의 현황을 파악하기 위해서, N은 null값으로 만들기 -\\> market3 데이터프레임으로 함. N 갯수 알아보기\n\n```{python}\nmarket2['public_toilet'].value_counts()\n```\n\n```{python}\nmarket2['parking_lot'].value_counts()\n```\n\n온누리 상품권은 사용안하는 곳은 null값이니까 그대로 count 쓰면 쓰는 곳만 세어짐 공중화장실, 주차장은 Y/N 이므로, Y만 세려면 Y만 세어줘야 함.\n\n```{python}\nmarket3 = market2.copy()\nimport numpy as np\nmarket3.loc[market3['public_toilet']=='N', 'public_toilet'] = np.nan\nmarket3['public_toilet'].isna().sum()\n\nmarket3.loc[market3['parking_lot']=='N', 'parking_lot'] = np.nan\nmarket3['parking_lot'].isna().sum()\n\n\npd.set_option('display.max_columns', None)\ngroup_df = market3.groupby(['type','market_scale']).agg(market_count= ('market_name','count')\n                                                       , certificate_count = ('certificate', 'count')\n                                                       , public_toilet_count = ('public_toilet', 'count')\n                                                       , parking_lot_count = ('parking_lot', 'count'))\ngroup_df\n\n```\n\n5일장 중에서 점포수가 많은 시장은 15곳 밖에 안 됨. 대부분 small에 해당함. 따라서 5일장만 열리는 곳은 소규모로 진행되는 시장임. 즉 외부 관광객이 간다기 보다는 지역 현지인들이 이용할 것으로 보임. 라고 생각을 했지, 5일장 블로그 봐보니까 관광지라면 관광객도 갈 법한 점포들도 있었음.\n\n```{python}\ngroup_df = market3.groupby(['type','market_scale','level']).agg(market_count= ('market_name','count')\n                                                       , certificate_count = ('certificate', 'count')\n                                                       , public_toilet_count = ('public_toilet', 'count')\n                                                       , parking_lot_count = ('parking_lot', 'count'))\ngroup_df['certificate_pct']= round(group_df['certificate_count']/group_df['market_count']*100,1)\ngroup_df['public_toilet_pct']=round(group_df['public_toilet_count']/group_df['market_count']*100,1)\ngroup_df['parking_lot_pct']=round(group_df['parking_lot_count']/group_df['market_count']*100,1)\ngroup_df\n```\n\n비율만 뽑아서 봐보기\n\n```{python}\ngroup_df.iloc[:,[0,4,5,6]]\n```\n\n## 상설+정기 시장의 지역 봐보기\n\n```{python}\nmarket2.query('type == \"상설+정기\"').head()\n```\n\n## 시/도 변수 만들기\n\n```{python}\nfirst_tokens = []\ni=0\n\n# for loop을 사용하여 각 행의 첫 음절 추출\nfor address in market2['address_old']:\n    first_token = market2['address_old'][i].split()[0] +' ' + market2['address_old'][i].split()[1] # 띄어쓰기를 기준으로 나눈 후 첫 번째 토큰을 추출\n    first_tokens.append(first_token)\n    i += 1\n\n# 추출한 첫 음절을 새로운 컬럼으로 추가\nmarket2['town_city'] = first_tokens\nmarket2.head()\n```\n\n## 지역별로 시장 수 알아보기\n\n```{python}\npd.set_option('display.max_rows', None)\nmarket2['town_city'].value_counts()\n```\n\n## 관광형 상설+정기 시장이 있는 지역 알아보기\n\n```{python}\nmarket4 = market2.query('type == \"상설+정기\"')\nmarket4['town_city'].value_counts()\n```\n","srcMarkdownNoYaml":"\n\n\n\n# 소상공인시장진흥공단_전국 전통시장 현황_2015\n\n예전에는 전통시장을 가면 편의시설이 부족해서 접근성이 떨어졌는데, 요즘에는 편의시설을 개선하려는 노력을 기울이고 있다. 1. 와이파이 설치 2. 건강한 식재료 (백년초 국수 등 + 지역 특색) 3. 공산품이 아니라 정성이 들어간 음식들 4. 저렴한 가격 + 온누리 상품권 사용가능 5. 쇼핑 후 차 한 잔의 여유를 위한 여가 공간 구비 (카페 등) 6. 1인 가구를 위한 음식\n\n상품권 가맹점포 정보 https://www.sbiz.or.kr/sijangtong/nation/onnuri/onnuriMktList.do?menu_type_a=A&menu_cms=&menu_id=070400#shopPopBtn\n\n```{python}\nimport pandas as pd\nimport numpy as np\n\nmarket = pd.read_excel(\"traditionalmarket.xlsx\")\nmarket2 = market.copy()\nmarket2.head()\n```\n\n현행 시장법상 시장은 상설시장과 정기시장으로 구분된다.\n\n![상설 시장](상설시장%20이미지.jpg) 상설 시장 : 시장 개설 요건을 갖추고, 일정한 구역내에서 상시로 거래하는 영업장. ![정기 시장](정기시장%20이미지.jpg)\n\n정기 시장 : 일정한 지역안에서 정기 또는 계절적으로 개설되는 시장. ![상설 시장과 5일장이 공존하는 시장](상설%20시장%20+%205일장%20이미지.jpg) 상설 시장과 5일장이 공존하는 시장 : 관광형 시장으로 탈바꿈한 시장. 5일 장날이 되면 주민, 관광객 등으로 인상한해를 이룬다.\n\n데이터상 '시장유형'에 정기시장이 존재하면 '시장개설주기'가 5일장이라고 하는지 알아보고자 함.\n\nhttps://wowmap.kr/market5 : 5일장 지도 (위치)\n\n## 변수명 바꾸기\n\n```{python}\nmarket2 = market2.rename(columns={'시장명' : 'market_name',\n                              '시장유형' : 'type',\n                              '소재지도로명주소' : 'address_new',\n                              '시장개설주기' : 'open_period',\n                              '소재지지번주소' : 'address_old',\n                              '점포수' : 'market_count',\n                              '사용가능상품권' : 'certificate',\n                              '공중화장실 보유여부' : 'public_toilet',\n                              '주차장 보유여부' : 'parking_lot',\n                              '개설년도' : 'year' ,\n                              '데이터기준일자' : 'data_date'})\nmarket2.head()\n```\n\n잘 바뀐 것을 알 수 있다.\n\n## 데이터 정보 알아보기\n\n```{python}\nmarket2.info()\n```\n\n8개가 범주컬럼이고, 2개가 수치 컬럼, 1개가 날짜컬럼임을 알 수 있다. (수치컬럼중 1개는 연도컬럼이라서, 우리가 분석해 볼 수 있는 수치 컬럼은 1개뿐이다.) 그리고 사용가능상품권(certificate)와 개설연도(year)에만 null값이 있다는 것을 알 수 있다.\n\n각 컬럼의 범주 알아보기\n\n```{python}\nmarket2['market_name'].value_counts()\n```\n\n이름이 동일한 서로 다른 시장이 존재함.\n\n```{python}\nmarket2['type'].value_counts()\n```\n\n시장 유형은 3가지임.\n\n```{python}\nmarket2['address_new'].value_counts()\n```\n\n```{python}\nmarket2['address_old'].value_counts()\n```\n\n주소가 동일한 시장이 있음\n\n```{python}\nmarket2['open_period'].value_counts()\n```\n\n정기 시장에 5일, 2일, 6일 있음.\n\n```{python}\nmarket2['certificate'].value_counts()\n```\n\n```{python}\nmarket2['public_toilet'].value_counts()\n```\n\n```{python}\nmarket2['parking_lot'].value_counts()\n```\n\n```{python}\nmarket2['year'].value_counts()\n```\n\n```{python}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nyear_group_count = market2.groupby('year').agg(year_count= ('year', 'count'))\n\nplt.clf()\nsns.lineplot(data=year_group_count, x='year', y='year_count')\nplt.show()\n```\n\n```{python}\nmarket2['data_date'].value_counts()\n```\n\n## 점포수 요약 정보 알아보기\n\n```{python}\nmarket2[['market_count']].describe()\n```\n\n점포수 위주로 봤을 때, 25%, 75% 기준으로 점포 사이즈를 나누는 것이 합리적으로 보인다. samll : 50개 미만 medium : 50개 이상 134개 미만 large : 134개 이상 3가지의 범주로 나누고자 한다.\n\n## 점포수로 범주화하기\n\n```{python}\nmarket2 = market2.assign(market_scale = np.where(market2[\"market_count\"] >= 134, \"large\", \n                                        np.where(market2[\"market_count\"] >= 50, \"medium\", \"small\")))\nmarket2.head()\n```\n\n점포수대로 범주화가 잘 되어진 것으로 보인다.\n\n```{python}\nimport matplotlib.pyplot as plt\nplt.clf()\nmarket2['market_scale'].value_counts().plot.bar(rot=0)\nplt.show()\n```\n\n## 편의시절(공중화장실, 주차장) 보유 여부에 따라 시장을 범주화하기.\n\n```{python}\nmarket2['level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nmarket2.head()\n```\n\n편의시절(공중화장실, 주차장) 보유 여부에 따라 시장의 편의성이 얼마나 좋은지 범주화 해보고자 한다.\n\n(공중화장실 Y, 주차장 Y) -\\> high (공중화장실 Y, 주차장 N) -\\> intermediate (공중화장실 N, 주차장 Y) -\\> intermediate (공중화장실 N, 주차장 N) -\\> low\n\n```{python}\nimport matplotlib.pyplot as plt\nplt.clf()\nmarket2['level'].value_counts().plot.bar(rot=0)\nplt.show()\n```\n\n대다수의 시장이 편의시설이 잘 구비되어 있음을 알 수 있다.\n\nY의 현황을 파악하기 위해서, N은 null값으로 만들기 -\\> market3 데이터프레임으로 함. N 갯수 알아보기\n\n```{python}\nmarket2['public_toilet'].value_counts()\n```\n\n```{python}\nmarket2['parking_lot'].value_counts()\n```\n\n온누리 상품권은 사용안하는 곳은 null값이니까 그대로 count 쓰면 쓰는 곳만 세어짐 공중화장실, 주차장은 Y/N 이므로, Y만 세려면 Y만 세어줘야 함.\n\n```{python}\nmarket3 = market2.copy()\nimport numpy as np\nmarket3.loc[market3['public_toilet']=='N', 'public_toilet'] = np.nan\nmarket3['public_toilet'].isna().sum()\n\nmarket3.loc[market3['parking_lot']=='N', 'parking_lot'] = np.nan\nmarket3['parking_lot'].isna().sum()\n\n\npd.set_option('display.max_columns', None)\ngroup_df = market3.groupby(['type','market_scale']).agg(market_count= ('market_name','count')\n                                                       , certificate_count = ('certificate', 'count')\n                                                       , public_toilet_count = ('public_toilet', 'count')\n                                                       , parking_lot_count = ('parking_lot', 'count'))\ngroup_df\n\n```\n\n5일장 중에서 점포수가 많은 시장은 15곳 밖에 안 됨. 대부분 small에 해당함. 따라서 5일장만 열리는 곳은 소규모로 진행되는 시장임. 즉 외부 관광객이 간다기 보다는 지역 현지인들이 이용할 것으로 보임. 라고 생각을 했지, 5일장 블로그 봐보니까 관광지라면 관광객도 갈 법한 점포들도 있었음.\n\n```{python}\ngroup_df = market3.groupby(['type','market_scale','level']).agg(market_count= ('market_name','count')\n                                                       , certificate_count = ('certificate', 'count')\n                                                       , public_toilet_count = ('public_toilet', 'count')\n                                                       , parking_lot_count = ('parking_lot', 'count'))\ngroup_df['certificate_pct']= round(group_df['certificate_count']/group_df['market_count']*100,1)\ngroup_df['public_toilet_pct']=round(group_df['public_toilet_count']/group_df['market_count']*100,1)\ngroup_df['parking_lot_pct']=round(group_df['parking_lot_count']/group_df['market_count']*100,1)\ngroup_df\n```\n\n비율만 뽑아서 봐보기\n\n```{python}\ngroup_df.iloc[:,[0,4,5,6]]\n```\n\n## 상설+정기 시장의 지역 봐보기\n\n```{python}\nmarket2.query('type == \"상설+정기\"').head()\n```\n\n## 시/도 변수 만들기\n\n```{python}\nfirst_tokens = []\ni=0\n\n# for loop을 사용하여 각 행의 첫 음절 추출\nfor address in market2['address_old']:\n    first_token = market2['address_old'][i].split()[0] +' ' + market2['address_old'][i].split()[1] # 띄어쓰기를 기준으로 나눈 후 첫 번째 토큰을 추출\n    first_tokens.append(first_token)\n    i += 1\n\n# 추출한 첫 음절을 새로운 컬럼으로 추가\nmarket2['town_city'] = first_tokens\nmarket2.head()\n```\n\n## 지역별로 시장 수 알아보기\n\n```{python}\npd.set_option('display.max_rows', None)\nmarket2['town_city'].value_counts()\n```\n\n## 관광형 상설+정기 시장이 있는 지역 알아보기\n\n```{python}\nmarket4 = market2.query('type == \"상설+정기\"')\nmarket4['town_city'].value_counts()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"은서개별분석.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"cosmo","title":"project1","author":"장일준, 이태현, 정은서, 정아영","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}